<?php

namespace App\Models\Backend\PartsManagement;

use App\Models\Backend\AdditionalFeatures\MarketVerdor;
use App\Models\Backend\AdditionalFeatures\Testimonial;
use App\Models\Backend\BikeManagement\MotorBike;
use App\Models\Scopes\Searchable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class PartsProduct extends Model
{
    use HasFactory;
    use Searchable;

    protected $fillable = [
        'parts_brand_category_id',
        'title',
        'sub_title',
        'short_description',
        'long_description',
        'features',
        'view_count',
        'status',
        'sku',
        'main_image',
        'sub_images',
    ];

    protected $searchableFields = ['*'];

    protected $table = 'parts_products';

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($partsProduct){
            if (!empty($partsProduct->testimonials))
            {
                $partsProduct->testimonials->each->delete();
            }
        });
    }

    protected static $partsProduct;
    protected static $files;
    protected static $file;
    protected static $fileUrl;
    protected static $fileName;
    protected static $directory;
    protected static $sub_images;
    protected static $images = [];

    public static function saveOrUpdatePartsProduct($request, $id = null,$partsProduct =null)
    {

//        $image = [];
//        if (self::$sub_images = $request->file('sub_images')) {
//            if(self::$sub_images)
//            {
//                if (isset($partsProduct->sub_images))
//                {
//                    foreach(json_decode($partsProduct->sub_images) as $file){
//                        unlink($file);
//                    }
//                }
//                foreach (self::$sub_images as self::$file) {
//                    self::$fileName = self::$file->getClientOriginalName();
//                    self::$directory =
//                        './admin/uploaded-files/parts-management/parts-product-sub-images/';
//                    self::$file->move(self::$directory, self::$fileName);
//                    $image[] = self::$directory . self::$fileName;
//                    // return  self::$fileName;
//                }}
//            else{
//                $image[]= $partsProduct->sub_images;
//            }
//        }
        $imageObject = '';
        if (self::$sub_images = $request->file('sub_images') )
        {
            if (isset($id))
            {
                self::$partsProduct = PartsProduct::find($id);
                if (!empty(self::$partsProduct->sub_images))
                {
                    foreach (json_decode(self::$partsProduct->sub_images) as $item)
                    {
                        deleteFileFromServer($item);
                    }
                }
            }
            foreach (self::$sub_images as $sub_image)
            {
                self::$fileUrl  = fileUpload($sub_image, 'parts-management/parts-product-sub-images');
                array_push(self::$images, self::$fileUrl);
            }
            $imageObject    = json_encode(self::$images);
        } else {
            if (isset($id))
            {
                self::$partsProduct = PartsProduct::find($id);
                $imageObject   = self::$partsProduct->sub_images;
            }
        }
        return PartsProduct::updateOrCreate(['id' => $id], [
            'parts_brand_category_id' =>$request->parts_brand_category_id,
            'title'                   => $request->title,
            'sub_title'               => $request->sub_title,
            'short_description'       => $request->short_description,
            'long_description'        => $request->long_description,
            'features'                => $request->features,
            'sku'                     => $request->sku,
            'main_image'              =>fileUpload($request->file('main_image'), 'parts-management/parts-product', isset($id) ? static::find($id)->main_image : ''),
            // $images            =>fileUpload($request->file('sub_images'), 'parts-management/parts-product', isset($id) ? static::find($id)->sub_images : ''),
            'sub_images'              => $imageObject,
            'status'                  => $request->status == 'on' ? 1 : 0,
        ]);

    }

    public function testimonials()
    {
        return $this->hasMany(Testimonial::class, 'parent_model_id');
    }

    public function partsBrandCategory()
    {
        return $this->belongsTo(PartsBrandCategory::class);
    }

    public function marketVerdors()
    {
        return $this->belongsToMany(MarketVerdor::class)->withPivot('market_verdor_id', 'parts_product_id', 'link');
//        return $this->belongsToMany(MarketVerdor::class);
    }

    public function motorBikes()
    {
        return $this->belongsToMany(MotorBike::class);
    }
}
